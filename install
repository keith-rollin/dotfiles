#!/bin/zsh

# Install everything, including dotfiles, vim_plug, brew, and prefs.
#
# Check out this repository into a handy directory, presumably one in which I
# do my development work (e.g., a "dev" or "src" directory). Running the
# "install" script will:
#
#   * Add the following links to my home directory, or update them if they
#     already exist:
#       * .zshrc
#       * .zshenv
#       * .gitconfig
#       * .clang-format
#       * .config/nvim
#       * .config/1password/ssh/agent.toml
#       * com.phantomprogrammer.apod.plist
#       * src
#   * Install Homebrew
#   * Install Rust
#   * Set system/application settings
#   * Update dotfiles's gitconfig
#   * Appease zsh

HERE=$(dirname -- "$(readlink -f "%R" "$0")")
DOTFILES="${HERE}"

# Get some handy functions defined: create_link_in_home, is_being_sourced,
# maybe_source.

source "${DOTFILES}/zshenv"
source "${DOTFILES}/bin/shell_functions.zsh"

# Make sure we're being source'd. install.brew and install.rust (at the current
# time, at least) make $PATH and environment variable changes. That call to
# .zshenv above should also be done in a source'd context.

if ! is_being_sourced
then
    echo
    echo "*** 'install' should be source'd in order for environment changes to take effect"
    echo
    exit 1
fi

echo
echo "### Creating/updating home directory links"
echo

create_link_in_home "${DOTFILES}/zshrc"                     .zshrc
create_link_in_home "${DOTFILES}/zshenv"                    .zshenv
create_link_in_home "${DOTFILES}/config/gitconfig"          .gitconfig
create_link_in_home "${DOTFILES}/config/clang-format.in"    .clang-format
create_link_in_home "${DOTFILES}/vim"                       .config/nvim
create_link_in_home "${DOTFILES}/config/agent.toml"         .config/1password/ssh/agent.toml
create_link_in_home "${DOTFILES}/config/pypirc"             .config/twine/pypirc
create_link_in_home "$(dirname "${DOTFILES}")"

# Installing a symbolic link doesn't work here -- launchd will skip over it,
# even though `launchctl load <plist>` succeeds. So copy the file over instead.

mkdir -p "${HOME}/Library/LaunchAgents"
cp "${DOTFILES}/LaunchAgents/com.phantomprogrammer.apod.plist" "${HOME}/Library/LaunchAgents"

# Install other things.

maybe_source "${HERE}/install.brew"
maybe_source "${HERE}/install.rust"
maybe_source "${HERE}/install.prefs"

# Update our dotfiles/.git/config to use "git" scheme (it's possible that we
# checked out the repo using the http scheme because we hadn't yet installed
# our ssh keys):

git -C "${DOTFILES}" remote set-url origin git@github.com:keith-rollin/dotfiles.git

# Prevent the following errors/messages when starting zsh:
#
# zsh compinit: insecure directories, run compaudit for list.
# Ignore insecure directories and continue [y] or abort compinit [n]?

compaudit | xargs chmod g-w
compaudit | xargs chown root

# Source these one more time so that things can be initialized/configured in
# the context of all related tools now being available (e.g., $EDITOR being set
# to nvim). This should actually largely be done already due to the sub-install
# scripts invoking shell_functions.zsh, but let's not assume that.

source "${DOTFILES}/zshenv"
source "${DOTFILES}/bin/shell_functions.zsh"

# Create our Cross-Desktop Group directories. See:
#
#   https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html

mkdir -p "${XDG_CACHE_HOME}"
mkdir -p "${XDG_CONFIG_HOME}"
mkdir -p "${XDG_DATA_HOME}"
mkdir -p "${XDG_STATE_HOME}"

mkdir -p "${ZSH_STATE_DIR}"
mkdir -p "${RUST_STATE_DIR}"
mkdir -p "${PYTHON_STATE_DIR}"
