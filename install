#!/bin/bash

# Install everything, including dotfiles, vim_plug, brew, and prefs.
#
# Check out this repository into a directory called "dev". Running it will:
#
#   * Complete the check-out if I forgot to perform a recursive check-out.
#   * Add the following links to my home directory, or update them if they
#     already exist:
#       * .bash_profile
#       * .bashrc
#       * .gitconfig
#       * .inputrc
#       * .vim
#       * bin
#       * dev
#       * dotfiles
#   * Create a "brew" directory next to it and put homebrew into it, or
#     update it if it already exists.
#   * Update vim with bundles defined in .vimrc (disabled for now)

ME="$(readlink "${BASH_SOURCE[0]}")"
[[ -n "${ME}" ]] || ME="${BASH_SOURCE[0]}"
HERE="$(dirname "${ME}")"
REALPATH="${HERE}/bin/realpath"
HERE="$("${REALPATH}" "${HERE}")"
REALPATH="${HERE}/bin/realpath"
LNS="${HERE}/bin/lns"

# Make sure we are in a dev/dotfiles directory. We want this arrangement so
# that we can check out `brew` into dev/brew.

DEV_PATH="$(dirname "${HERE}")"
DEV_NAME="$(basename "${DEV_PATH}")"
if [[ "${DEV_NAME}" != "dev" ]]
then
    echo "### dotfiles must be in dev parent directory"
    exit 1
fi

# Create or update links in my home directory to handy things elsewhere.

function create_link_in_home()
{
    local file="$1"
    local link="$2"

    [[ -z "${link}" ]] && link="$(basename "${file}")"

    file="$("${REALPATH}" "${file}")"
    link="${HOME}/${link}"

    if [[ -e "${link}" && ! -L "${link}" ]]
    then
        echo "### File ${link} exists and is not a link. Please move it aside."
        return
    fi

    rm -f "${link}"
    "${LNS}" "${file}" "${link}"
}

echo
echo "*** Creating/updating home directory links"
echo

create_link_in_home "${HERE}/bash_profile"  .bash_profile
create_link_in_home "${HERE}/bashrc"        .bashrc
create_link_in_home "${HERE}/gitconfig"     .gitconfig
create_link_in_home "${HERE}/inputrc"       .inputrc
create_link_in_home "${HERE}/vim"           .vim

create_link_in_home "${HERE}"
create_link_in_home "${DEV_PATH}"

# Make sure that brew's home has been created. This will ensure that bashrc
# (called next) will add brew/bin to the $PATH.

BREW_PATH="${DEV_PATH}/brew"
if [[ ! -d "${BREW_PATH}" ]]
then
    mkdir "${BREW_PATH}"
fi
unset BREW_PATH

# Get some handy functions defined (well, `maybe_source`, anyway).

source "${HOME}/.bashrc"

# Install Brew now.

maybe_source "${HERE}/install.brew"

# Re-run bashrc in case something something is sensitive to brew being
# installed.

source "${HOME}/.bashrc"

# Install/update vim bundles. Let's do this last so that the operation can be
# done in the full context of environment variables and tools.
# This is commented out because I no longer use Vundle. I now use vim_plug.
# Bring this back after figuring out how to auto-install plugins with vim-plug.

# echo "*** Installing/updating vim bundles"
# vim +PluginInstall +qall &> /dev/null
