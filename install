#!/bin/zsh

# Install everything, including dotfiles, vim_plug, brew, and prefs.
#
# Check out this repository into a directory called "dev". Running it will:
#
#   * Add the following links to my home directory, or update them if they
#     already exist:
#       * .bash_profile
#       * .bashrc
#       * .gitconfig
#       * .inputrc
#       * .vim
#       * .zshrc
#       * .clang-format (also move to /Volumes/Data
#       * dev
#   * Move ~/Documents to /Volumes/Data.
#   * Point Sublime Text preferences to the ones in this repo.
#   * Create a "brew" directory next to it and put homebrew into it, or
#     update it if it already exists.
#   * Update vim with bundles defined in .vimrc (disabled for now)
#   * Set some application preferences with `defaults`.

[ -n "${MAIN_INSTALL}" ] && BASE_ME="$MAIN_INSTALL" || BASE_ME="${0}"
ME="$(readlink "${BASE_ME}")"
[ -n "${ME}" ] || ME="${BASE_ME}"
HERE="$(dirname "${ME}")"

REALPATH="${HERE}/bin/realpath"
HERE="$("${REALPATH}" "${HERE}")"
REALPATH="${HERE}/bin/realpath"
LNS="${HERE}/bin/lns"

# Make sure we are in a dev/dotfiles directory. We want this arrangement so
# that we can check out `brew` into dev/brew.

DEV_PATH="$(dirname "${HERE}")"
DEV_NAME="$(basename "${DEV_PATH}")"
if [ "${DEV_NAME}" != "dev" ]
then
    echo "### dotfiles must be in dev parent directory"
    exit 1
fi

# Create or update links in my home directory to handy things elsewhere.

create_link_in_home()
{
    local file="$1"
    local link="$2"

    [ -z "${link}" ] && link="$(basename "${file}")"

    file="$("${REALPATH}" "${file}")"
    link="${HOME}/${link}"

    if [ -e "${link}" -a ! -L "${link}" ]
    then
        echo "### File ${link} exists but is not a link. Please move it aside."
        return
    fi

    rm -f "${link}"
    "${LNS}" "${file}" "${link}"
}

echo
echo "*** Creating/updating home directory links"
echo

create_link_in_home "${HERE}/bashrc"            .bash_profile
create_link_in_home "${HERE}/bashrc"            .bashrc
create_link_in_home "${HERE}/gitconfig"         .gitconfig
create_link_in_home "${HERE}/inputrc"           .inputrc
create_link_in_home "${HERE}/vim"               .vim
create_link_in_home "${HERE}/bashrc"            .zshrc
create_link_in_home "${HERE}/clang-format.in"   .clang-format

mkdir -p "${HOME}/.config"
create_link_in_home "${HERE}/starship.toml"     .config/starship.toml

mkdir -p "${HOME}/.config/nvim"
create_link_in_home "${HERE}/vim/init.vim"      .config/nvim/init.vim

create_link_in_home "${DEV_PATH}"

# clang-format will not search for .clang-format in the home directory.
# Instead, it traverses parents until it finds the file. So storing
# .clang-format in ~ only works if you store all your projects in your home
# directory.
#
# I don't really do that at the moment. While my home directory is
# /Users/keith, my work is kept on a separate logical volume at
# /Volumes/Data/dev. This arrangement helps when I want to install multiple
# versions of the OS for experimental or testing purposes -- I can install each
# OS onto it's own volume, and each volume can access my work data on the Data
# volume.
#
# Therefore, I need to store a .clang-format in /Volumes/Data so that projects
# rooted there can find it.

DOT_CLANG_FORMAT="/Volumes/Data/.clang-format"
[[ -d $(dirname "${DOT_CLANG_FORMAT}") && ! -e "${DOT_CLANG_FORMAT}" ]] && \
    cp -R "$HOME/.clang-format" "${DOT_CLANG_FORMAT}"

# Move ~/Downloads to /Volumes/Data, and replace it with a link. This way,
# Downloads can be shared across boot volumes, and not take up space on the
# otherwise trashable boot volume. TODO: If the shared directory doesn't exist,
# rather than create it, move any existing directory there. (NOTE: this
# operation is a bit finicky and could use some hardening.)

SHARED_DOWNLOADS_DIR="/Volumes/Data/Downloads"
HOME_DOWNLOADS_DIR="${HOME}/Downloads"

if [ ! -e "${SHARED_DOWNLOADS_DIR}" -o -d "${SHARED_DOWNLOADS_DIR}" ]
then
    if [ -d "${HOME_DOWNLOADS_DIR}" ]
    then
        rm -f "${HOME_DOWNLOADS_DIR}/.DS_Store"
        rm -f "${HOME_DOWNLOADS_DIR}/.localized"
        if [ -z "$(ls -A "${HOME_DOWNLOADS_DIR}")" ]
        then
            # At this point, we know that HOME_DOWNLOADS_DIR is an empty
            # directory, and SHARED_DOWNLOADS_DIR is either a directory or
            # doesn't exist.
            mkdir -p "${SHARED_DOWNLOADS_DIR}" # Handle failure here. It might not have permission to create the directory. If so, fail without deleting ~/Downloads.
            touch "${SHARED_DOWNLOADS_DIR}/.localized"
            sudo rm -d "${HOME_DOWNLOADS_DIR}"  # We get "permission denied" without sudo, even though we own it.
            "${LNS}" "${HOME_DOWNLOADS_DIR}" "${SHARED_DOWNLOADS_DIR}"
        else
            # HOME_DOWNLOADS_DIR is a directory, but there's stuff in it that
            # we should move first. Warn about it.
            echo "### Cannot link ${HOME_DOWNLOADS_DIR} to ${SHARED_DOWNLOADS_DIR} because it's not empty"
        fi
    elif [ ! -L "${HOME_DOWNLOADS_DIR}" ]
    then
        # HOME_DOWNLOADS_DIR is neither a directory nor a link. Warn about it.
        echo "### Cannot link ${HOME_DOWNLOADS_DIR} to ${SHARED_DOWNLOADS_DIR} because it's not a directory"
    fi
else
    # SHARED_DOWNLOADS_DIR already exists, but it's not a directory.
    echo "### Cannot create ${SHARED_DOWNLOADS_DIR} because a non-directory already exists at that location"
fi

# If there's an empty ~/Library/Sublime Text 3/Packages/User directory, replace
# it with a link to our dotfiles version.

LOCAL_USER_DIR="$HOME/Library/Application Support/Sublime Text 3/Packages/User"
SHARED_USER_DIR="$HERE/SublimeText-Packages-User"
CREATE_LINK=FALSE
if [ -e "$LOCAL_USER_DIR" ]
then
    if [ -h "$LOCAL_USER_DIR" ]
    then
        # It's already a sym link; assume it's because we made it that way.
        true
    elif [ ! -d "$LOCAL_USER_DIR" ]
    then
        # It's a file or it's something else other than a directory.
        echo "Cannot link $LOCAL_USER_DIR to $SHARED_USER_DIR because the former already exists and is not a directory."
    elif [ "$(ls -A "$LOCAL_USER_DIR")" != "" ]
    then
        # It's a real directory, but it's not empty.
        echo "Cannot link $LOCAL_USER_DIR to $SHARED_USER_DIR because the former is not empty."
    else
        # There's something at the target location. If we reach here, then it
        # ought to be a real, empty directory.
        CREATE_LINK=TRUE
    fi
else
    # The target doesn't exist, so it might be OK to create it.
    CREATE_LINK=TRUE
fi

if [ ! -d "$SHARED_USER_DIR" ]
then
    CREATE_LINK=FALSE
    echo "Cannot link $LOCAL_USER_DIR to $SHARED_USER_DIR because the latter doesn't exist."
fi

if [ "$CREATE_LINK" = TRUE ]
then
    rm -rf "$LOCAL_USER_DIR" &> /dev/null
    mkdir -p "$(dirname "$LOCAL_USER_DIR")"
    "${LNS}" "$SHARED_USER_DIR" "$LOCAL_USER_DIR"
fi

# Get some handy functions defined: is_executable, maybe_resolve, maybe_source,
# prepend_path.

source "${HOME}/.bashrc"

# Install Brew now.

maybe_source "${HERE}/install.brew"

# Install/update vim bundles. Let's do this last so that the operation can be
# done in the full context of environment variables and tools.

echo
echo "*** Installing/updating vim bundles"
echo

# This doesn't work well on first install. It seems to hang, especially when
# vimrc tries to invoke gruvbox before it's isntalled.
# vim +PlugUpgrade +PlugUpdate +qall &>/dev/null

echo
echo "*** Setting System Defaults"
echo

defaults write com.apple.TextEdit   HeightInChars                   -int 80
defaults write com.apple.TextEdit   RichText                        -int 0
defaults write com.apple.TextEdit   TabWidth                        -int 4
defaults write com.apple.TextEdit   WidthInChars                    -int 120

defaults write com.apple.Safari     AlwaysRestoreSessionAtLaunch    -int 1
defaults write com.apple.Safari     AutoOpenSafeDownloads           -int 0
defaults write com.apple.Safari     DownloadsClearingPolicy         -int 2
defaults write com.apple.Safari     ExcludePrivateWindowWhenRestoringSessionAtLaunch -int 0
defaults write com.apple.Safari     HistoryAgeInDaysLimit           -int 365000
defaults write com.apple.Safari     IncludeDevelopMenu              -int 1
defaults write com.apple.Safari     NewTabBehavior                  -int 1  # Open to empty page
defaults write com.apple.Safari     NewWindowBehavior               -int 1  # Open to empty page

# Secret options from https://github.com/kpdecker/dotfiles/blob/master/setup/osx-defaults/safari.sh
defaults write com.apple.Safari     IncludeInternalDebugMenu        -int 1
defaults write com.apple.Safari     ShowFullURLInSmartSearchField   -int 1

# Set the delay before the proxy icon appears. The first controls only the
# Finder; the second is global. See:
#   <https://brettterpstra.com/2021/04/14/fixing-the-big-sur-proxy-icon-delay-globally/>
# defaults write com.apple.Finder NSToolbarTitleViewRolloverDelay     -float 0
defaults write -g NSToolbarTitleViewRolloverDelay                   -float 0

# Use the system print dialog instead of Chrome's custom dialog.
defaults write com.google.Chrome    DisablePrintPreview             -bool true
