#!/bin/zsh

# Install everything, including dotfiles, vim_plug, brew, and prefs.
#
# Check out this repository into a directory called "dev". Running it will:
#
#   * Add the following links to my home directory, or update them if they
#     already exist:
#       * .bash_profile
#       * .bashrc
#       * .gitconfig
#       * .inputrc
#       * .vim
#       * .zshrc
#       * dev
#   * Create a "brew" directory next to it and put homebrew into it, or
#     update it if it already exists.
#   * Update vim with bundles defined in .vimrc (disabled for now)

[ -n "${MAIN_INSTALL}" ] && BASE_ME="$MAIN_INSTALL" || BASE_ME="${0}"
ME="$(readlink "${BASE_ME}")"
[ -n "${ME}" ] || ME="${BASE_ME}"
HERE="$(dirname "${ME}")"

REALPATH="${HERE}/bin/realpath"
HERE="$("${REALPATH}" "${HERE}")"
REALPATH="${HERE}/bin/realpath"
LNS="${HERE}/bin/lns"

# Make sure we are in a dev/dotfiles directory. We want this arrangement so
# that we can check out `brew` into dev/brew.

DEV_PATH="$(dirname "${HERE}")"
DEV_NAME="$(basename "${DEV_PATH}")"
if [ "${DEV_NAME}" != "dev" ]
then
    echo "### dotfiles must be in dev parent directory"
    exit 1
fi

# Create or update links in my home directory to handy things elsewhere.

create_link_in_home()
{
    local file="$1"
    local link="$2"

    [ -z "${link}" ] && link="$(basename "${file}")"

    file="$("${REALPATH}" "${file}")"
    link="${HOME}/${link}"

    if [ -e "${link}" -a ! -L "${link}" ]
    then
        echo "### File ${link} exists but is not a link. Please move it aside."
        return
    fi

    rm -f "${link}"
    "${LNS}" "${file}" "${link}"
}

echo
echo "*** Creating/updating home directory links"
echo

create_link_in_home "${HERE}/bashrc"        .bash_profile
create_link_in_home "${HERE}/bashrc"        .bashrc
create_link_in_home "${HERE}/gitconfig"     .gitconfig
create_link_in_home "${HERE}/inputrc"       .inputrc
create_link_in_home "${HERE}/vim"           .vim
create_link_in_home "${HERE}/bashrc"        .zshrc

create_link_in_home "${DEV_PATH}"

# If there's an empty ~/Library/Sublime Text 3/Packages/User directory, replace
# it with a link to our dotfiles version.

LOCAL_USER_DIR="$HOME/Library/Application Support/Sublime Text 3/Packages/User"
SHARED_USER_DIR="$HERE/SublimeText-Packages-User"
CREATE_LINK=FALSE
if [ -e "$LOCAL_USER_DIR" ]
then
    if [ -h "$LOCAL_USER_DIR" ]
    then
        # It's already a sym link; assume it's because we made it that way.
        true
    elif [ ! -d "$LOCAL_USER_DIR" ]
    then
        # It's a file or it's something else other than a directory.
        echo "Cannot link $LOCAL_USER_DIR to $SHARED_USER_DIR because the former already exists and is not a directory."
    elif [ "$(ls -A "$LOCAL_USER_DIR")" != "" ]
    then
        # It's a real directory, but it's not empty.
        echo "Cannot link $LOCAL_USER_DIR to $SHARED_USER_DIR because the former is not empty."
    else
        # There's something at the target location. If we reach here, then it
        # ought to be a real, empty directory.
        CREATE_LINK=TRUE
    fi
else
    # The target doesn't exist, so it might be OK to create it.
    CREATE_LINK=TRUE
fi

if [ ! -d "$SHARED_USER_DIR" ]
then
    CREATE_LINK=FALSE
    echo "Cannot link $LOCAL_USER_DIR to $SHARED_USER_DIR because the latter doesn't exist."
fi

if [ "$CREATE_LINK" = TRUE ]
then
    rm -rf "$LOCAL_USER_DIR" &> /dev/null
    mkdir -p "$(dirname "$LOCAL_USER_DIR")"
    "${LNS}" "$SHARED_USER_DIR" "$LOCAL_USER_DIR"
fi

# Get some handy functions defined: is_executable, maybe_resolve, maybe_source,
# prepend_path.

source "${HOME}/.bashrc"

# Install Brew now.

maybe_source "${HERE}/install.brew"

# Install/update vim bundles. Let's do this last so that the operation can be
# done in the full context of environment variables and tools.
# This is commented out because I no longer use Vundle. I now use vim_plug.
# Bring this back after figuring out how to auto-install plugins with vim-plug.

# echo "*** Installing/updating vim bundles"
# vim +PluginInstall +qall &> /dev/null
