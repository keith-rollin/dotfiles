#!/bin/zsh

# Install everything, including dotfiles, vim_plug, brew, and prefs.
#
# Check out this repository into a handy directory, presumably one in which I
# do my development work (e.g., a "dev" or "src" directory). Running the
# "install" script will:
#
#   * Add the following links to my home directory, or update them if they
#     already exist:
#       * .zshrc
#       * .zshenv
#       * .gitconfig
#       * .clang-format (also copied to /Volumes/Data)
#       * .config/starship.toml
#       * .config/nvim
#       * .config/1password/ssh/agent.toml
#       * src
#   * Point Sublime Text preferences to the ones in this repo.
#   * Install Homebrew
#   * Update vim with bundles defined in .vimrc (disabled for now)
#   * Set some application preferences with `defaults`.

HERE="$(dirname "${0}")"
REALPATH="${HERE}/bin/realpath"
HERE="$("${REALPATH}" "${HERE}")"
REALPATH="${HERE}/bin/realpath"
LNS="${HERE}/bin/lns"

# Create or update links in my home directory to handy things elsewhere.

create_link()
{
    local real_file="$1"
    local sym_file="$2"

    real_file="$("${REALPATH}" "${real_file}")"

    if [ -e "${sym_file}" -a ! -L "${sym_file}" ]
    then
        echo "### File ${sym_file} exists but is not a link. Please move it aside."
        return
    fi

    rm -f "${sym_file}"
    mkdir -p "$(dirname "${sym_file}")"
    "${LNS}" "${real_file}" "${sym_file}"
}

create_link_in_home()
{
    local real_file="$1"
    local sym_file="$2"

    [ -z "${sym_file}" ] && sym_file="$(basename "${real_file}")"

    sym_file="${HOME}/${sym_file}"

    create_link "$real_file" "$sym_file"
}

echo
echo "*** Creating/updating home directory links"
echo

create_link_in_home "${HERE}/zshrc"             .zshrc
create_link_in_home "${HERE}/zshenv"            .zshenv
create_link_in_home "${HERE}/gitconfig"         .gitconfig
create_link_in_home "${HERE}/clang-format.in"   .clang-format
create_link_in_home "${HERE}/starship.toml"     .config/starship.toml
create_link_in_home "${HERE}/vim"               .config/nvim
create_link_in_home "${HERE}/agent.toml"        .config/1password/ssh/agent.toml
create_link_in_home "$(dirname "${HERE}")"

# Create a .clang-format in /Volumes/Data for any work I might do over there.

DOT_CLANG_FORMAT="/Volumes/Data/.clang-format"
[[ -d $(dirname "${DOT_CLANG_FORMAT}") ]] && \
    create_link "${HERE}/clang-format.in" "${DOT_CLANG_FORMAT}"

# If there's an empty ~/Library/Sublime Text 3/Packages/User directory, replace
# it with a link to our dotfiles version.

LOCAL_USER_DIR="$HOME/Library/Application Support/Sublime Text 3/Packages/User"
SHARED_USER_DIR="$HERE/SublimeText-Packages-User"
CREATE_LINK=FALSE
if [ -e "$LOCAL_USER_DIR" ]
then
    if [ -h "$LOCAL_USER_DIR" ]
    then
        # It's already a sym link; assume it's because we made it that way.
        true
    elif [ ! -d "$LOCAL_USER_DIR" ]
    then
        # It's a file or it's something else other than a directory.
        echo "Cannot link $LOCAL_USER_DIR to $SHARED_USER_DIR because the former already exists and is not a directory."
    elif [ "$(ls -A "$LOCAL_USER_DIR")" != "" ]
    then
        # It's a real directory, but it's not empty.
        echo "Cannot link $LOCAL_USER_DIR to $SHARED_USER_DIR because the former is not empty."
    else
        # There's something at the target location. If we reach here, then it
        # ought to be a real, empty directory.
        CREATE_LINK=TRUE
    fi
else
    # The target doesn't exist, so it might be OK to create it.
    CREATE_LINK=TRUE
fi

if [ ! -d "$SHARED_USER_DIR" ]
then
    CREATE_LINK=FALSE
    echo "Cannot link $LOCAL_USER_DIR to $SHARED_USER_DIR because the latter doesn't exist."
fi

if [ "$CREATE_LINK" = TRUE ]
then
    rm -rf "$LOCAL_USER_DIR" &> /dev/null
    mkdir -p "$(dirname "$LOCAL_USER_DIR")"
    "${LNS}" "$SHARED_USER_DIR" "$LOCAL_USER_DIR"
fi

# Get some handy functions defined: is_executable, maybe_source, dont_sleep.

source "${HOME}/.zshrc"

# Install Brew now.

maybe_source "${HERE}/install.brew"

# Install python-lsp-server. Note that this requires Homebrew to be installed
# since we need Python3 installed.
#
# See https://github.com/python-lsp/python-lsp-server for additional
# installation options.

pip3 install "python-lsp-server[all]"

echo
echo "*** Setting System Defaults"
echo

defaults write com.apple.dock       static-only                     -bool true; killall Dock

defaults write com.apple.TextEdit   HeightInChars                   -int 80
defaults write com.apple.TextEdit   RichText                        -int 0
defaults write com.apple.TextEdit   TabWidth                        -int 4
defaults write com.apple.TextEdit   WidthInChars                    -int 120

defaults write com.apple.Safari     AlwaysRestoreSessionAtLaunch    -int 1
defaults write com.apple.Safari     AutoOpenSafeDownloads           -int 0
defaults write com.apple.Safari     DownloadsClearingPolicy         -int 2
defaults write com.apple.Safari     ExcludePrivateWindowWhenRestoringSessionAtLaunch -int 0
defaults write com.apple.Safari     HistoryAgeInDaysLimit           -int 365000
defaults write com.apple.Safari     IncludeDevelopMenu              -int 1
defaults write com.apple.Safari     NewTabBehavior                  -int 1  # Open to empty page
defaults write com.apple.Safari     NewWindowBehavior               -int 1  # Open to empty page

defaults write com.apple.screencapture disable-shadow               -bool true

# Secret options from https://github.com/kpdecker/dotfiles/blob/master/setup/osx-defaults/safari.sh
# defaults write com.apple.Safari     IncludeInternalDebugMenu        -int 1
# defaults write com.apple.Safari     ShowFullURLInSmartSearchField   -int 1

# Set the delay before the proxy icon appears. The first controls only the
# Finder; the second is global. See:
#   <https://brettterpstra.com/2021/04/14/fixing-the-big-sur-proxy-icon-delay-globally/>
# defaults write com.apple.Finder NSToolbarTitleViewRolloverDelay     -float 0
defaults write -g NSToolbarTitleViewRolloverDelay                   -float 0

# Show the classic-style dialogs rather than the vertically-arranged dialogs.
defaults write -g NSAlertMetricsGatheringEnabled                    -bool false

# Use the system print dialog instead of Chrome's custom dialog.
# defaults write com.google.Chrome    DisablePrintPreview             -bool true

# Update our dotfiles/.git/config to point use "git" scheme (it's possible that
# we checked out the repo using the http scheme because we hadn't yet installed
# our ssh keys):

git -C "${HERE}" remote set-url origin git@github.com:keith-rollin/dotfiles.git
