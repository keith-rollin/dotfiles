set nocompatible    " Should not be needed if a vimrc file (this file) exists.
                    " But I found that pastetoggle does not work unless I
                    " explicitly include this statement.

" Plugins to try out:
"
"   Lokaltog/powerline                  Deprecated/obsolete, see powerline/powerline
"   powerline/powerline
"   bling/vim-airline                   Redirects to vim-airline/vim-airline
"   vim-airline/vim-airline
"   itchyny/lightline.vim
"   rbong/vim-crystalline
"
"   Valloric/YouCompleteMe
"   airblade/vim-gitgutter              Show status of each line in the vim gutter
"   altercation/vim-colors-solarized
"   ap/vim-css-color
"   davidhalter/jedi-vim                Python auto-completion
"   docunext/closetag.vim
"   embear/vim-localvimrc
"   ervandew/supertab
"   fatih/vim-go
"   haya14busa/incsearch.vim
"   junegunn/fzf.vim                    Reported to be a better version of CtrlP
"   junegunn/goyo.vim
"   kballard/vim-swift                  Supports syntastic
"   landaire/deoplete-swift
"   mitsuse/autocomplete-swift
"   nathanaelkane/vim-indent-guides
"   powerline/powerline
"   python-rope/ropevim                 Python refactoring
"   scrooloose/syntastic
"   sheerun/vim-polyglot
"   statico/vim-inform7
"   suan/vim-instant-markdown
"   tmux-plugins/vim-tmux
"   tomasr/molokai
"   toyamarinyon/vim-swift
"   tpope/vim-endwise
"   tpope/vim-eunuch
"   tpope/vim-flagship
"   tpope/vim-git
"   tpope/vim-jdaddy
"   tpope/vim-pathogen
"   tpope/vim-repeat
"   tpope/vim-rhubarb
"   tpope/vim-rsi
"   tpope/vim-sleuth
"   tpope/vim-speeddating
"   tpope/vim-surround
"   tpope/vim-tbone
"   tpope/vim-unimpaired
"   vim-scripts/DrawIt
"   w0rp/ale                            Better syntastic
"   wellle/targets.vim
"
"   Stuff in: https://github.com/nicknisi/dotfiles/blob/master/config/nvim/plugins.vim
"
"   Review https://vimawesome.com/
"
"   From ThePrimeagen:
"
"   jremmen/vim/ripgrep
"   vim-utils/vim-man
"   lyuts/vim-rtags
"   git@github.com:kien/ctrlp.vim.git   Why such a verbose path?
"   mbbill/undotree

" Configure plugins
" -----------------

" Configure CtrlP
" TBD: Try out other variable mucking indicated below.
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_root_markers = ['Makefile.shared']
" let g:ctrlp_match_window_bottom = 0       # Now ctrlp_match_window = "top, ..."
" let g:ctrlp_match_window_reversed = 0     # Now ctrlp_match_window = "ttb, ..."
" let g:ctrlp_custom_ignore = '\v\~$|\.(o|swp|pyc|wav|mp3|ogg|blend)$|(^|[/\\])\.(hg|git|bzr)($|[/\\])|__init__\.py'
" let g:ctrlp_working_path_mode = 0
" let g:ctrlp_dotfiles = 0                  # Now probably ctrlp_show-hidden
" let g:ctrlp_switch_buffer = 0
" let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
" let g:ctrlp_use_caching = 0

" Configure swift.vim: don't show the fancy -> in Swift source files.
let g:swift_no_conceal=1

" Pull in vim-plug
" ----------------
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Install plugins
" ---------------
call plug#begin('~/.vim/plugged')
Plug 'ConradIrwin/vim-bracketed-paste'  " Handle BPM (bracketed paste mode -- see https://cirw.in/blog/bracketed-paste)
Plug 'ctrlpvim/ctrlp.vim'               " Fuzzy file searching.
Plug 'derekwyatt/vim-fswitch'           " Switching between companion files.
Plug 'itchyny/lightline.vim'            " Powerline-ish
Plug 'junegunn/vim-easy-align'          " Aligning source code.
Plug 'keith/swift.vim'                  " Swift syntax highlighting and indenting.
Plug 'tacahiroy/ctrlp-funky'            " CtrlP extension that performs function navigation.
Plug 'tpope/vim-commentary'             " Comment/uncomment
Plug 'tpope/vim-fugitive'               " Git integration.
Plug 'tpope/vim-sensible'               " Sensible vim defaults.
call plug#end()

let g:lightline = {
    \   'active': {
    \       'left': [ [ 'mode', 'paste' ],
    \                 [ 'gitbranch', 'readonly', 'filename', 'modified' ] ],
    \       'right': [ [ 'date_time' ],
    \                  [ 'lineinfo' ],
    \                  [ 'percent' ] ]
    \   },
    \   'component': {
    \       'date_time': "%{strftime('%F\ %T')}"
    \   },
    \   'component_function': {
    \       'gitbranch': 'FugitiveHead'
    \   },
    \ }

set background=dark
set noshowmode                  " Don't show --INSERT--, since lightline does that.

if executable('rg')
    let g:rg_derive_root='true'
endif

" Variables
" ---------
set autoindent                  " Copy indent from previous line.
set autoread                    " Automatically reread externally changed files.
set autowriteall                " Write the file when we switch buffers.
set clipboard=unnamed           " Interoperate with the system clipboard.
set grepprg=rg\ --vimgrep       " Use ripgrep for grepping.
set laststatus=2                " Always show a status line, even on the last window.
set lcs=tab:▸\ ,trail:•,nbsp:∆  " Treatment of invisible characters. (Overrides vim-sensible)
set list                        " Show invisible characters
set modeline                    " Enable modeline support
set modelines=4                 " Scan last four lines of file for modeline
set noerrorbells                " Disable error bells
set nojoinspaces                " Only one space after a period when joining lines.
set nostartofline               " Don't reset cursor to start of line when moving around.
set pastetoggle=<leader>v       " Key sequence for toggling 'paste'.
set path+=**                    " Recursively search subdirectories for files on tab-complete.
set scrolloff=3                 " Keep cursor this many lines from top or bottom for context. (Overrides vim-sensible)
set shiftround                  " Round indent to multiple of 'shiftwidth'
set showcmd                     " Show the command being entered.
set shortmess=atI               " Don't show the intro message when starting Vim
set smartindent                 " Indent like C-like programs.

" Use this when we're not using lightline.
" set statusline=%f\ %h%w%m%r%=%{fugitive#statusline()}\ \ \ %(%l,%c%V%)\ \ \ %P,%L\ \ \ %{strftime('%F\ %T')}

" Search related
set hlsearch                    " Highlight searches
"set incsearch                  " (Set in vim.sensible)
set ignorecase                  " Ignore case of searches
set smartcase                   " Case-insensitive searching unless we type at least one capital letter

" Line number related. (Disabled, in part because I don't like selecting the
" line number when I select text for copy/pasting.)
set number                      " Show absolute line numbers
set relativenumber              " Show relative line numbers; w/ above, accommodates both.
set numberwidth=5               " Use common width for everything up to 9999.

" TAB related
set expandtab                   " Convert tabs to spaces
set shiftwidth=4                " Number of spaces to use for each step of (auto)indent.
set softtabstop=4               " Number of spaces in tab when editing
set tabstop=4                   " Number of visual spaces per TAB

" Speling corections
" ------------------
abbr adn and
abbr const_case const_cast
abbr dynamic_case dynamic_cast
abbr fitler filter
abbr funciton function
abbr reinterpret_case reinterpret_cast
abbr static_case static_cast
abbr teh the
abbr tehn then
abbr tempalte template
abbr waht what
abbr .78. ..............................................................................
abbr -78- ------------------------------------------------------------------------------
abbr =78= ==============================================================================
abbr *78* ******************************************************************************

" Misc.
" -----
let g:HasInsertedAutocmds = get(g:, 'HasInsertedAutocmds', 0)
if !g:HasInsertedAutocmds && has("autocmd")
    let g:HasInsertedAutocmds = 1

    " Set text width to 78 when a .txt file is created or opened.
    autocmd BufNewFile,BufRead *.txt set textwidth=78

    " `:source` .vimrc after we edit and save it.
    autocmd BufWritePost .vimrc,vimrc source $MYVIMRC

    " Restore the last cursor position. From: 'help last-position-jump'
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

    " Treat .json files as .js
    autocmd BufNewFile,BufRead *.json setlocal filetype=json syntax=javascript

    " Treat .md files as Markdown
    autocmd BufNewFile,BufRead *.md setlocal filetype=markdown

    " Treat .mm files as Objective-C
    autocmd BufNewFile,BufRead *.mm setlocal filetype=objc
endif

" Reload the .vimrc file, in case for some reason the autocmd above doesn't do
" the trick. This mirrors my bash command that does the same thing with the
" .bashrc file.
command! Reload :source $MYVIMRC

" Remind me what file I'm in.
command WhatAmI :echo expand("%")

" Highlight colors
" highlight CursorLine cterm=NONE ctermbg=LightBlue ctermfg=Black guibg=LightBlue guifg=Black
highlight LineNr ctermfg=grey
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'    " Match spec for git merge error markers

" Set the default highlighting style for shell scripts. This particular
" setting assumes that our scripts are POSIX compatible and so shows things
" like $(...) without flagging it as invalid.
let g:is_posix = 1

" netrw: Configuration -- compare to vinegar
"
" Where did I get these settings? Because they are identical to those in the
" following video, which I don't believe I've seen before. Searching the
" interwebs, I do see lots of articles and .vimrc files with the exact same
" lines, but I haven't found the origin. And why am I not using them?
"
"   https://www.youtube.com/watch?v=XA2WjJbmmoM
"
let g:netrw_banner=0        " disable banner
" let g:netrw_browse_split=4  " open in prior window
" let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
" let g:netrw_list_hide=netrw_gitignore#Hide() " hide gitignore'd files
" let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+' " hide dotfiles by default (this is the string toggled by netrw-gh)

" Some additional tweaks I must have picked up somewhere:
" let g:netrw_browse_split = 2
" let g:netrw_banner = 0
" let g:netrw_winsize = 25

" Custom keys
" -----------
let mapleader = " "

" Cheat Sheet (from `:help :map-modes`):
"
" There are six sets of mappings:
"
" - For Normal mode: When typing commands.
" - For Visual mode: When typing commands while the Visual area is highlighted.
" - For Select mode: like Visual mode but typing text replaces the selection.
" - For Operator-pending mode: When an operator is pending (after "d", "y", "c",
"   etc.).
" - For Insert mode: These are also used in Replace mode.
" - For Command-line mode: When entering a ":" or "/" command. (KR: And, I
"   suspect, "!" commands.)
"
"      COMMANDS                    MODES
" :map   :noremap  :unmap     Normal, Visual, Select, Operator-pending
" :nmap  :nnoremap :nunmap    Normal
" :vmap  :vnoremap :vunmap    Visual and Select
" :smap  :snoremap :sunmap    Select
" :xmap  :xnoremap :xunmap    Visual
" :omap  :onoremap :ounmap    Operator-pending
" :map!  :noremap! :unmap!    Insert and Command-line
" :imap  :inoremap :iunmap    Insert
" :lmap  :lnoremap :lunmap    Insert, Command-line, Lang-Arglistlist
" :cmap  :cnoremap :cunmap    Command-line
"
" Use *noremap when recursive mapping is not wanted. Use *unmap to remove a
" specified binding. Use *mapclear to remove all bindings for that mode.

nnoremap <silent> <leader>.       <c-^>
nnoremap <silent> <leader>,       :FSHere<CR>
nnoremap <silent> <leader><space> :call StripWhitespace()<CR>
nnoremap <silent> <leader>eb      :edit ~/.bashrc<CR>
nnoremap <silent> <leader>eg      :edit ~/.gitconfig<CR>
nnoremap <silent> <leader>ev      :edit $MYVIMRC<CR>
nnoremap <silent> <leader>fb      :CtrlPBuffer<CR>
nnoremap <silent> <leader>ff      :CtrlPFunky<CR>
nnoremap <silent> <leader>fu      :execute 'CtrlPFunky ' . expand('<cword>')<CR>
nnoremap <silent> <leader>ga      <Plug>(EasyAlign)
xnoremap <silent> <leader>ga      <Plug>(EasyAlign)
nnoremap <silent> <leader>m       :call ParentMake()<CR>
nnoremap <silent> <leader>si      :set cursorline!<CR>
nnoremap <silent> <leader>sl      :set list!<CR>
nnoremap <silent> <leader>ss      :set spell!<CR>
" nnoremap <silent> <leader>v       :set paste!<CR> " Handled with 'pastetoggle'
nnoremap <silent> <leader>w       :w<CR>

" Take the selection and move it up or down, after which, reselect the text,
" reformat/indent it, and select it again.

vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" These are kind of neat, but I think I'm tired of them.
" nnoremap <silent> j               gj
" nnoremap <silent> k               gk
" nnoremap <silent> ^               g^
" nnoremap <silent> $               g$

    " I don't see this documented under 'key-notation', but <M-...> doesn't
    " seem to work for on the Mac.

    " nnoremap <silent> <M-c>           :wincmd c<CR>
    " nnoremap <silent> <M-h>           :call WinMove('h')<CR>
    " nnoremap <silent> <M-j>           :call WinMove('j')<CR>
    " nnoremap <silent> <M-k>           :call WinMove('k')<CR>
    " nnoremap <silent> <M-l>           :call WinMove('l')<CR>
    " nnoremap <silent> <M-q>           :wincmd q<CR>

nnoremap <silent> ç               :wincmd c<CR>
nnoremap <silent> ˙               :call WinMove('h')<CR>
nnoremap <silent> ∆               :call WinMove('j')<CR>
nnoremap <silent> ˚               :call WinMove('k')<CR>
nnoremap <silent> ¬               :call WinMove('l')<CR>
nnoremap <silent> œ               :wincmd q<CR>

" Add some mappings to better unify vim's mini-buffer with other editing
" environments. Experimental at this point -- we'll see how I like them (or if
" I even remember to use them).
" cnoremap <C-a>  <Home>
" cnoremap <C-b>  <Left>
" cnoremap <C-f>  <Right>
" cnoremap <C-d>  <Delete>
" cnoremap <M-b>  <S-Left>
" cnoremap <M-f>  <S-Right>
" cnoremap <M-d>  <S-right><Delete>
" cnoremap <Esc>b <S-Left>
" cnoremap <Esc>f <S-Right>
" cnoremap <Esc>d <S-right><Delete>
" cnoremap <C-g>  <C-c>

" Functions
" ---------
" Strip trailing whitespace
function! StripWhitespace()
    let l:oldpos = getpos(".")
    let l:oldquery = getreg('/')
    :%s/\s\+$//e
    call setpos('.', l:oldpos)
    call setreg('/', l:oldquery)
endfunction

" Bottleneck function for appending a new component to a path. This is not
" done in a file-system-independent manner, but at least the hackishness is
" localized to this one location.
function! AppendPathComponent(path, filename)
    if strpart(a:path, -1) != "/"
        return a:path . "/" . a:filename
    endif
    return a:path . a:filename
endfunction

" Find a file in an ancestor directory, starting with cwd.
function! FindInAncestorDirectory(filename)
    let l:curpath = fnamemodify(getcwd(), ":p:h")
    while 1
        let l:filepath = AppendPathComponent(l:curpath, a:filename)
        if glob(l:filepath) != ""
            return l:filepath
        endif
        let l:newpath = fnamemodify(l:curpath, ":h")
        if l:newpath == l:curpath
            return ""
        endif
        let l:curpath = l:newpath
    endwhile
endfunction

" Execute :make on a parent makefile.
function! ParentMake()
    let l:makefile = FindInAncestorDirectory("Makefile")
    if l:makefile == ""
        echoerr "### Can't find makefile for: " . getcwd()
        return
    endif
    let l:prefmakeprg = &makeprg
    set makeprg=make-filtered
    try
        execute 'make -C ' . fnamemodify(l:makefile, ":h")
    finally
        execute 'set makeprg=' . l:prefmakeprg
    endtry
endfunction

" Perform the command to move between windows if possible. If not, take that
" as an indication to create a new window in the given direction and then move
" into it.
function! WinMove(key)
    let t:curwin = winnr()
    exec "wincmd " . a:key
    if (t:curwin == winnr())
        if (match(a:key,'[jk]'))
            wincmd v
        else
            wincmd s
        endif
        exec "wincmd " . a:key
    endif
endfunction
