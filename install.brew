#!/bin/bash

# (This script is not intended to be stand-alone. It's intended to be source'd
# from `install`.)

# Install homebrew (if missing) or update it (if not). Install or update
# desired packages. Also install/update cask along with desired packages.
#
# See https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/El_Capitan_and_Homebrew.md
# regarding being able to install into /usr/local. Because of the SIP issue on
# El Capitan and because I've got other things installing themselves into
# /usr/local, I'm installing homebrew into its own dedicated directory.

# First check to see if it's already installed. If not, prepare a place for it
# and install it.

function update_variable()
{
    local NAME="$1"
    local FILE="$2"

    eval VALUE="\$$1"
    [[ -z "${VALUE}" ]] && { echo "### VALUE is empty"; return; }

    sed -E -i '' \
        -e "s#(${NAME}[[:space:]]*=[[:space:]]*).*#\1'${VALUE}'.freeze#" \
        "$FILE"
}

if ! is_executable brew
then
    echo "*** Installing Homebrew"

    # Download the brew installer script.

    INSTALLER="/tmp/install"
    curl -fsSL "https://raw.githubusercontent.com/Homebrew/install/master/install" \
        -o "${INSTALLER}" # (Should check for errors.)

    # If HOMEBREW_PREFIX, HOMEBREW_REPOSITORY, and/or HOMEBREW_CACHE are
    # defined, substitute them into the installer script.

    update_variable HOMEBREW_PREFIX "${INSTALLER}"
    update_variable HOMEBREW_REPOSITORY "${INSTALLER}"
    update_variable HOMEBREW_CACHE "${INSTALLER}"

    # If there are any more /usr/local's in the installer, bail.

    grep -q '^[^#]*\/usr\/local' "${INSTALLER}" && exit 1

    # Make sure this exists; homebrew gets tripped up if there is a custom
    # installation directory and it doesn't exist. It ends up thinking that
    # /usr/local doesn't have the correct access privileges.

    mkdir -p "${HOMEBREW_PREFIX}"
    mkdir -p "${HOMEBREW_TEMP}" # Need to make this one, too.

    # Run and remove the installer.

    ruby "${INSTALLER}"
    rm "${INSTALLER}"
fi


# Second, install the apps we want.

if is_executable brew
then
    # Make sure this exists; homebrew doesn't seem to do that.
    mkdir -p "$HOMEBREW_TEMP"

    echo "*** Updating Homebrew"
    brew update

    echo "*** Upgrading installed Homebrew apps"
    brew upgrade

    echo "*** Installing new Homebrew apps"

    # Some tools to consider from:
    #
    #   https://github.com/mathiasbynens/dotfiles/blob/master/brew.sh
    #
    # coreutils, moreutils, findutils, gnu-sed, bash, bash-completion2, wget,
    # vim, grep, openssh, screen, git, git-lfs, lynx, pigz, pv, speedtest-cli,
    # zopfli

    apps=(
        #hub            # Maybe some other time. Never got into it. Also, check out gitless.
        #shellcheck     # Nice, but expensive. Requires ghc, which takes over an hour to install.
        git-crypt
        github-keygen
        kylef/formulae/swiftenv
        ripgrep
        ssh-copy-id
        tree
        vim
        watch           # Kinda expensive, but OK...
        xz
    )
    casks=(
        # 1Password doesn't work with Homebrew-cask-installed versions of these
        # browsers.
        #firefox
        #google-chrome

        # Quick Look Plugins (https://github.com/sindresorhus/quick-look-plugins)

        betterzipql
        qlcolorcode
        qlmarkdown
        qlprettypatch
        qlstephen
        quicklook-csv
        quicklook-json
        suspicious-package
    )

    brew install "${apps[@]}"
    brew cask install "${casks[@]}"
    qlmanage -r &> /dev/null
fi
