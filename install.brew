#!/bin/zsh

# Install, update, or remove homebrew along with my desired packages.
#
# NOTE: This script is normally source'd from `install`, but it can also be
# source'd from the command-line.
#
# To perform a simple, first-time install, or to update the installation to
# reflect newly added and/or deleted packages:
#
#       source ./install.brew
#
# To remove homebrew:
#
#       UNINSTALL=1 source ./install.brew
#
# To remove homebrew and then re-install it:
#
#       CLEAN_INSTALL=1 source ./install.brew
#
# TERMINOLOGY CHEAT SHEET:
#
# (See: https://docs.brew.sh/Formula-Cookbook)
#
# * Tap: A Git repository of Formulae. E.g., homebrew-core.
# * Formula: The Ruby file describing the package.
# * Cellar: Build/intallation location. Prefixed by project/version.
# * Keg: The versioned installation path in the Cellar.
# * Keg-only: Not made visible to $HOMEBREW_PREFIX/{bin,lib,etc}
# * Bottle: Prebuilt Keg.
# * Cask: Facility for installing macOS native applications.
# * Bundle: Something about homebrew dependencies.


# Packages to install as source (formulae) or pre-built (bottles).

APPS=(
    1password-cli   # Command-line interface for 1Password
    eza             # Modern replacement for 'ls'
    git             # Distributed revision control system
    git-delta       # Syntax-highlighting pager for git and diff output
    neovim          # Ambitious Vim-fork focused on extensibility and agility
    node            # Platform built on V8 to build network applications (Needed for some LSP plugins)
    python-tk@3.11  # Python interface to Tcl/Tk
    python@3.11     # Interpreted, interactive, object-oriented programming language
    ripgrep         # Search tool like grep and The Silver Searcher
    tree            # Display directories as trees (with optional color/HTML output)
    watch           # Executes a program periodically, showing output fullscreen

    #clang-format    # Formatting tools for C, C++, Obj-C, Java, JavaScript, TypeScript
    #ruff            # Extremely fast Python linter, written in Rust
    #shfmt           # Autoformat shell script source code
    #stylua          # Opinionated Lua code formatter

    # Needed for building neovim.
    #
    # Note that cmake -- which is also required -- is installed below as a
    # cask. This seems to be the approach recommended by homebrew, which prints
    # a warning if installed by formula. I suppose this is so we can get the
    # macOS configuration program.

    ninja libtool automake pkg-config gettext curl
)

# Packages to install as pre-built Mac binaries.

CASKS=(
    cmake           # Needed for building neovim.
    emacs           # Recommended to install as cask in order to get GUI support

    # TODO: Test the installation of these:
    #
    # arc
    # backblaze
    # dash
    # electrum
    # google-earth-pro
    # hazeover
    # moom
    # warp
)


remove_brew()
{
    if ! have_brew
    then
        # echo "*** Asked to uninstall brew, but it doesn't seem to be installed."
        # error 1
        return
    fi

    echo
    echo "### Uninstalling Homebrew"
    echo

    brew rm --zap "${CASKS[@]}"
    delete_brew
    sudo rm -rf $(brew_path)
}

install_brew()
{
    # Get homebrew if I don't already have it.

    if ! have_brew
    then
        echo
        echo "### Cloning Homebrew repository"
        echo

        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi

    # Get homebrew onto the PATH and see if it actually installed.

    local HOMEBREW_PREFIX=$(brew_path)
    prepend_path "${HOMEBREW_PREFIX}/sbin"
    prepend_path "${HOMEBREW_PREFIX}/bin"

    if ! have_brew
    then
        echo "*** Could not find brew executable after installing"
        error 1
    fi

    # Install the apps I want.

    echo
    echo "### Installing Homebrew apps"
    echo

    local TO_INSTALL=( $(filter APPS $(brew list --formula)) )
    (( $#TO_INSTALL > 0 )) && dont_sleep brew install -q "${TO_INSTALL[@]}"

    local TO_INSTALL=( $(filter CASKS $(brew list --cask)) )
    (( $#TO_INSTALL > 0 )) && dont_sleep brew install -q --cask "${TO_INSTALL[@]}"
}

have_brew()
{
    is_executable brew
}

error()
{
    return "$@"
}

# Get some commands: brew_path, delete_brew, dont_sleep, filter,
# is_being_sourced, is_executable, prepend_path

source "${HOME}/.zshenv"
source "${HOME}/.zshrc"

if is_being_sourced
then
    if [[ "${CLEAN_INSTALL}" == "1" ]]
    then
        remove_brew
        install_brew
    elif [[ "${UNINSTALL}" == "1" ]]
    then
        remove_brew
    else
        install_brew
    fi
else
    echo "*** install.brew should be source'd in order for \$PATH changes to take effect"
fi

# The following paths are causing us problems:
#
#       /opt/homebrew/Cellar/neovim/0.9.4/share/nvim/runtime/queries/*.scm
#       /opt/homebrew/Cellar/neovim/0.9.4/lib/nvim/parser/*.so
#
# There seems to be some conflict between them and treesitter, which tries to
# install its own versions. One confuses the other, leading to a long, unclear
# error message:
#
#       "lua/plugins.lua" <last line of file>, 18245B
#       Error detected while processing BufReadPost Autocommands for "*":
#       Error executing lua callback: ...brew/Cellar/neovim/0.9.4/share/nvim/runtime/filetype.lua:24:
#       Error executing lua: ...brew/Cellar/neovim/0.9.4/share/nvim/runtime/filetype.lua:25:
#       BufReadPost Autocommands for "*"..FileType Autocommands for "*":
#       Vim(append):
#       Error executing lua callback: ...im/0.9.4/share/nvim/runtime/lua/vim/treesitter/query.lua:259:
#       query: invalid structure at position 2992 for language lua
#       ...more...
#
# We can avoid this error by moving the built-in versions out of the way before
# invoking neovim and having treesitter throw its fit.
#
# (Will the following code break if there's more than one version of neovim
# installed?)

maybe_hide()
{
    echo "### Attempting to move $1"
    [[ -d "$1" ]] && mv "$1" "$1.bak"
}

NEOVIM_PATH="$(brew list --versions neovim | tr ' ' / | tail -1)"
if [[ -n "${NEOVIM_PATH}" ]]
then
    NEOVIM_PATH="$(brew --cellar)/${NEOVIM_PATH}"
    maybe_hide "${NEOVIM_PATH}/lib/nvim/parser"
    maybe_hide "${NEOVIM_PATH}/share/nvim/queries"
else
    echo "*** Unable to find neovim"
fi

unset CASKS
unset APPS

true

# ===== OLD JUNK BELOW THIS LINE =====

# Some tools to consider from:
#
#   https://github.com/mathiasbynens/dotfiles/blob/master/brew.sh
#
# coreutils, moreutils, multimarkdown, findutils, gnu-sed, bash,
# bash-completion2, wget, vim, grep, openssh, screen, git, git-lfs, lynx,
# pigz, pv, speedtest-cli, zopfli
#
# New to explore from https://remysharp.com/2018/08/23/cli-improved
# htop
# bat
# fd
# ncdu
# nnn
# tldr
#
# Also:
#   bash-git-prompt
#   kylef/formulae/swiftenv
#   hub            # Maybe some other time. Never got into it. Also, check out gitless.
#   shellcheck     # Nice, but expensive. Requires ghc, which takes over an hour to install.
#
# Apps I used to install thinking I'd use them, but never did.
#
# bat             # Clone of cat(1) with syntax highlighting and Git integration
# broot           # New way to see and navigate directory trees
# cmake
# dust            # More intuitive version of du in rust
# fd              # Simple, fast and user-friendly alternative to find
# fzf
# #git-svn
# github-keygen   # (Using 1Password instead)
# htop            # Improved top (interactive process viewer)
# jsonpp          # Command-line JSON pretty-printer
# mas
# ninja
# procs           # Modern replacement for ps written by Rust
# starfish
# telnet
# tldr            # Simplified and community-driven man pages
# tokei           # Program that allows you to count code, quickly

# Maybe additional for Python:
#
# pyenv           # Python version management
# pipx            # Execute binaries from Python packages in isolated environments
#
# Tap into here for swiftenv.
#
# brew tap kylef/formulae
#
# # For SerenityOS:
#
#   coreutils e2fsprogs qemu bash gcc@11 imagemagick ninja cmake ccache rsync
#   genext2fs

# Universal-ctags is its own project and should be installed from HEAD.
# Do I need this if I'm also considering tree-sitter?
# dont_sleep brew install --HEAD universal-ctags/universal-ctags/universal-ctags
